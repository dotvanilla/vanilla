0000000: 0061 736d                                 ; WASM_BINARY_MAGIC
0000004: 0100 0000                                 ; WASM_BINARY_VERSION
; section "Type" (1)
0000008: 01                                        ; section code
0000009: 00                                        ; section size (guess)
000000a: 02                                        ; num types
; type 0
000000b: 60                                        ; func
000000c: 00                                        ; num params
000000d: 00                                        ; num results
; type 1
000000e: 60                                        ; func
000000f: 01                                        ; num params
0000010: 7f                                        ; i32
0000011: 00                                        ; num results
0000009: 08                                        ; FIXUP section size
; section "Import" (2)
0000012: 02                                        ; section code
0000013: 00                                        ; section size (guess)
0000014: 01                                        ; num imports
; import header 0
0000015: 03                                        ; string length
0000016: 656e 76                                  env  ; import module name
0000019: 0a                                        ; string length
000001a: 6279 7465 6368 756e 6b73                 bytechunks  ; import field name
0000024: 02                                        ; import kind
0000025: 00                                        ; limits: flags
0000026: 01                                        ; limits: initial
0000013: 13                                        ; FIXUP section size
; section "Function" (3)
0000027: 03                                        ; section code
0000028: 00                                        ; section size (guess)
0000029: 04                                        ; num functions
000002a: 00                                        ; function 0 signature index
000002b: 01                                        ; function 1 signature index
000002c: 00                                        ; function 2 signature index
000002d: 00                                        ; function 3 signature index
0000028: 05                                        ; FIXUP section size
; section "Global" (6)
000002e: 06                                        ; section code
000002f: 00                                        ; section size (guess)
0000030: 01                                        ; num globals
0000031: 7f                                        ; i32
0000032: 01                                        ; global mutability
0000033: 41                                        ; i32.const
0000034: b005                                      ; i32 literal
0000036: 0b                                        ; end
000002f: 07                                        ; FIXUP section size
; section "Export" (7)
0000037: 07                                        ; section code
0000038: 00                                        ; section size (guess)
0000039: 01                                        ; num exports
000003a: 21                                        ; string length
000003b: 436c 6173 7353 7472 7563 7475 7265 4469  ClassStructureDi
000004b: 6666 6572 656e 6365 5465 7374 2e4d 6169  fferenceTest.Mai
000005b: 6e                                       n  ; export name
000005c: 00                                        ; export kind
000005d: 00                                        ; export func index
0000038: 25                                        ; FIXUP section size
; section "Start" (8)
000005e: 08                                        ; section code
000005f: 00                                        ; section size (guess)
0000060: 02                                        ; start func index
000005f: 01                                        ; FIXUP section size
; section "Code" (10)
0000061: 0a                                        ; section code
0000062: 00                                        ; section size (guess)
0000063: 04                                        ; num functions
; function body 0
0000064: 00                                        ; func body size (guess)
0000065: 01                                        ; local decl count
0000066: 08                                        ; local type count
0000067: 7f                                        ; i32
0000068: 23                                        ; global.get
0000069: 00                                        ; global index
000006a: 21                                        ; local.set
000006b: 00                                        ; local index
000006c: 20                                        ; local.get
000006d: 00                                        ; local index
000006e: 41                                        ; i32.const
000006f: 10                                        ; i32 literal
0000070: 6a                                        ; i32.add
0000071: 41                                        ; i32.const
0000072: e400                                      ; i32 literal
0000074: 36                                        ; i32.store
0000075: 02                                        ; alignment
0000076: 00                                        ; store offset
0000077: 20                                        ; local.get
0000078: 00                                        ; local index
0000079: 41                                        ; i32.const
000007a: 00                                        ; i32 literal
000007b: 6a                                        ; i32.add
000007c: 41                                        ; i32.const
000007d: 01                                        ; i32 literal
000007e: b7                                        ; f64.convert_i32_s
000007f: 39                                        ; f64.store
0000080: 03                                        ; alignment
0000081: 00                                        ; store offset
0000082: 20                                        ; local.get
0000083: 00                                        ; local index
0000084: 41                                        ; i32.const
0000085: 08                                        ; i32 literal
0000086: 6a                                        ; i32.add
0000087: 41                                        ; i32.const
0000088: 01                                        ; i32 literal
0000089: b7                                        ; f64.convert_i32_s
000008a: 39                                        ; f64.store
000008b: 03                                        ; alignment
000008c: 00                                        ; store offset
000008d: 20                                        ; local.get
000008e: 00                                        ; local index
000008f: 41                                        ; i32.const
0000090: 14                                        ; i32 literal
0000091: 6a                                        ; i32.add
0000092: 24                                        ; global.set
0000093: 00                                        ; global index
0000094: 20                                        ; local.get
0000095: 00                                        ; local index
0000096: 21                                        ; local.set
0000097: 01                                        ; local index
0000098: 20                                        ; local.get
0000099: 01                                        ; local index
000009a: 21                                        ; local.set
000009b: 02                                        ; local index
000009c: 20                                        ; local.get
000009d: 01                                        ; local index
000009e: 41                                        ; i32.const
000009f: 10                                        ; i32 literal
00000a0: 6a                                        ; i32.add
00000a1: 41                                        ; i32.const
00000a2: 00                                        ; i32 literal
00000a3: 41                                        ; i32.const
00000a4: 9f8d 06                                   ; i32 literal
00000a7: 6b                                        ; i32.sub
00000a8: 36                                        ; i32.store
00000a9: 02                                        ; alignment
00000aa: 00                                        ; store offset
00000ab: 23                                        ; global.get
00000ac: 00                                        ; global index
00000ad: 21                                        ; local.set
00000ae: 03                                        ; local index
00000af: 20                                        ; local.get
00000b0: 03                                        ; local index
00000b1: 41                                        ; i32.const
00000b2: 08                                        ; i32 literal
00000b3: 6a                                        ; i32.add
00000b4: 41                                        ; i32.const
00000b5: e300                                      ; i32 literal
00000b7: b7                                        ; f64.convert_i32_s
00000b8: 39                                        ; f64.store
00000b9: 03                                        ; alignment
00000ba: 00                                        ; store offset
00000bb: 20                                        ; local.get
00000bc: 03                                        ; local index
00000bd: 41                                        ; i32.const
00000be: 00                                        ; i32 literal
00000bf: 6a                                        ; i32.add
00000c0: 20                                        ; local.get
00000c1: 03                                        ; local index
00000c2: 41                                        ; i32.const
00000c3: 08                                        ; i32 literal
00000c4: 6a                                        ; i32.add
00000c5: 2b                                        ; f64.load
00000c6: 03                                        ; alignment
00000c7: 00                                        ; load offset
00000c8: 39                                        ; f64.store
00000c9: 03                                        ; alignment
00000ca: 00                                        ; store offset
00000cb: 20                                        ; local.get
00000cc: 03                                        ; local index
00000cd: 41                                        ; i32.const
00000ce: 10                                        ; i32 literal
00000cf: 6a                                        ; i32.add
00000d0: 20                                        ; local.get
00000d1: 03                                        ; local index
00000d2: 41                                        ; i32.const
00000d3: 00                                        ; i32 literal
00000d4: 6a                                        ; i32.add
00000d5: 2b                                        ; f64.load
00000d6: 03                                        ; alignment
00000d7: 00                                        ; load offset
00000d8: 20                                        ; local.get
00000d9: 03                                        ; local index
00000da: 41                                        ; i32.const
00000db: 08                                        ; i32 literal
00000dc: 6a                                        ; i32.add
00000dd: 2b                                        ; f64.load
00000de: 03                                        ; alignment
00000df: 00                                        ; load offset
00000e0: a2                                        ; f64.mul
00000e1: aa                                        ; i32.trunc_f64_s
00000e2: 36                                        ; i32.store
00000e3: 02                                        ; alignment
00000e4: 00                                        ; store offset
00000e5: 20                                        ; local.get
00000e6: 03                                        ; local index
00000e7: 41                                        ; i32.const
00000e8: 14                                        ; i32 literal
00000e9: 6a                                        ; i32.add
00000ea: 24                                        ; global.set
00000eb: 00                                        ; global index
00000ec: 20                                        ; local.get
00000ed: 03                                        ; local index
00000ee: 21                                        ; local.set
00000ef: 04                                        ; local index
00000f0: 23                                        ; global.get
00000f1: 00                                        ; global index
00000f2: 21                                        ; local.set
00000f3: 05                                        ; local index
00000f4: 20                                        ; local.get
00000f5: 05                                        ; local index
00000f6: 41                                        ; i32.const
00000f7: 00                                        ; i32 literal
00000f8: 6a                                        ; i32.add
00000f9: 20                                        ; local.get
00000fa: 04                                        ; local index
00000fb: 41                                        ; i32.const
00000fc: 00                                        ; i32 literal
00000fd: 6a                                        ; i32.add
00000fe: 2b                                        ; f64.load
00000ff: 03                                        ; alignment
0000100: 00                                        ; load offset
0000101: 39                                        ; f64.store
0000102: 03                                        ; alignment
0000103: 00                                        ; store offset
0000104: 20                                        ; local.get
0000105: 05                                        ; local index
0000106: 41                                        ; i32.const
0000107: 08                                        ; i32 literal
0000108: 6a                                        ; i32.add
0000109: 20                                        ; local.get
000010a: 04                                        ; local index
000010b: 41                                        ; i32.const
000010c: 08                                        ; i32 literal
000010d: 6a                                        ; i32.add
000010e: 2b                                        ; f64.load
000010f: 03                                        ; alignment
0000110: 00                                        ; load offset
0000111: 39                                        ; f64.store
0000112: 03                                        ; alignment
0000113: 00                                        ; store offset
0000114: 20                                        ; local.get
0000115: 05                                        ; local index
0000116: 41                                        ; i32.const
0000117: 10                                        ; i32 literal
0000118: 6a                                        ; i32.add
0000119: 20                                        ; local.get
000011a: 04                                        ; local index
000011b: 41                                        ; i32.const
000011c: 10                                        ; i32 literal
000011d: 6a                                        ; i32.add
000011e: 28                                        ; i32.load
000011f: 02                                        ; alignment
0000120: 00                                        ; load offset
0000121: 36                                        ; i32.store
0000122: 02                                        ; alignment
0000123: 00                                        ; store offset
0000124: 20                                        ; local.get
0000125: 05                                        ; local index
0000126: 41                                        ; i32.const
0000127: 14                                        ; i32 literal
0000128: 6a                                        ; i32.add
0000129: 24                                        ; global.set
000012a: 00                                        ; global index
000012b: 20                                        ; local.get
000012c: 05                                        ; local index
000012d: 21                                        ; local.set
000012e: 06                                        ; local index
000012f: 20                                        ; local.get
0000130: 04                                        ; local index
0000131: 41                                        ; i32.const
0000132: 10                                        ; i32 literal
0000133: 6a                                        ; i32.add
0000134: 41                                        ; i32.const
0000135: 00                                        ; i32 literal
0000136: 41                                        ; i32.const
0000137: b8b6 05                                   ; i32 literal
000013a: 6b                                        ; i32.sub
000013b: 36                                        ; i32.store
000013c: 02                                        ; alignment
000013d: 00                                        ; store offset
000013e: 20                                        ; local.get
000013f: 07                                        ; local index
0000140: 10                                        ; call
0000141: 01                                        ; function index
0000142: 0b                                        ; end
; move data: [65, 143) -> [66, 144)
0000064: de01                                      ; FIXUP func body size
; function body 1
0000144: 00                                        ; func body size (guess)
0000145: 00                                        ; local decl count
0000146: 20                                        ; local.get
0000147: 00                                        ; local index
0000148: 41                                        ; i32.const
0000149: 00                                        ; i32 literal
000014a: 6a                                        ; i32.add
000014b: 42                                        ; i64.const
000014c: ef93 d2a3 08                              ; i64 literal
0000151: b9                                        ; f64.convert_i64_s
0000152: 39                                        ; f64.store
0000153: 03                                        ; alignment
0000154: 00                                        ; store offset
0000155: 0b                                        ; end
0000144: 11                                        ; FIXUP func body size
; function body 2
0000156: 00                                        ; func body size (guess)
0000157: 00                                        ; local decl count
0000158: 10                                        ; call
0000159: 03                                        ; function index
000015a: 0b                                        ; end
0000156: 04                                        ; FIXUP func body size
; function body 3
000015b: 00                                        ; func body size (guess)
000015c: 00                                        ; local decl count
000015d: 10                                        ; call
000015e: 00                                        ; function index
000015f: 0b                                        ; end
000015b: 04                                        ; FIXUP func body size
; move data: [63, 160) -> [64, 161)
0000062: fd01                                      ; FIXUP section size
; section "Data" (11)
0000161: 0b                                        ; section code
0000162: 00                                        ; section size (guess)
0000163: 02                                        ; num data segments
; data segment header 0
0000164: 00                                      
0000165: 41                                        ; i32.const
0000166: 0a                                        ; i32 literal
0000167: 0b                                        ; end
0000168: d102                                      ; data segment size
; data segment data 0
000016a: 6579 4a74 5a57 3176 636e 6c51 6448 4969 
000017a: 4f6e 7369 566d 4673 6457 5569 4f6a 4577 
000018a: 6653 7769 5932 7868 6333 4d69 4f69 4a6a 
000019a: 6158 4a6a 6247 5644 6247 467a 6379 4973 
00001aa: 496d 4e73 5958 4e7a 5832 6c6b 496a 6f78 
00001ba: 4d43 7769 5a6d 6c6c 6247 527a 496a 7037 
00001ca: 496e 6769 4f6e 7369 5a32 5675 5a58 4a70 
00001da: 5979 4936 5731 3073 496e 4a68 6479 4936 
00001ea: 496d 5932 4e43 4973 496e 5235 6347 5569 
00001fa: 4f6a 5239 4c43 4a35 496a 7037 496d 646c 
000020a: 626d 5679 6157 4d69 4f6c 7464 4c43 4a79 
000021a: 5958 6369 4f69 4a6d 4e6a 5169 4c43 4a30 
000022a: 6558 426c 496a 6f30 6653 7769 6369 4936 
000023a: 6579 4a6e 5a57 356c 636d 6c6a 496a 7062 
000024a: 5853 7769 636d 4633 496a 6f69 6154 4d79 
000025a: 4969 7769 6448 6c77 5a53 4936 4d58 3139 
000026a: 4c43 4a70 6331 4e30 636e 566a 6443 4936 
000027a: 5a6d 4673 6332 5573 496d 316c 6447 6876 
000028a: 5a48 4d69 4f6e 7439 4c43 4a75 5957 316c 
000029a: 6333 4268 5932 5569 4f69 4a30 5a58 4e30 
00002aa: 5247 6c6d 5a6d 5679 5a57 356a 5a53 4a39 
00002ba: 00                                        ; data segment data
; data segment header 1
00002bb: 00                                      
00002bc: 41                                        ; i32.const
00002bd: db02                                      ; i32 literal
00002bf: 0b                                        ; end
00002c0: d502                                      ; data segment size
; data segment data 1
00002c2: 6579 4a74 5a57 3176 636e 6c51 6448 4969 
00002d2: 4f6e 7369 566d 4673 6457 5569 4f6a 4d30 
00002e2: 4e33 3073 496d 4e73 5958 4e7a 496a 6f69 
00002f2: 5932 6c79 5932 786c 5533 5279 6457 4e30 
0000302: 4969 7769 5932 7868 6333 4e66 6157 5169 
0000312: 4f6a 4d30 4e79 7769 5a6d 6c6c 6247 527a 
0000322: 496a 7037 496e 6769 4f6e 7369 5a32 5675 
0000332: 5a58 4a70 5979 4936 5731 3073 496e 4a68 
0000342: 6479 4936 496d 5932 4e43 4973 496e 5235 
0000352: 6347 5569 4f6a 5239 4c43 4a35 496a 7037 
0000362: 496d 646c 626d 5679 6157 4d69 4f6c 7464 
0000372: 4c43 4a79 5958 6369 4f69 4a6d 4e6a 5169 
0000382: 4c43 4a30 6558 426c 496a 6f30 6653 7769 
0000392: 6369 4936 6579 4a6e 5a57 356c 636d 6c6a 
00003a2: 496a 7062 5853 7769 636d 4633 496a 6f69 
00003b2: 6154 4d79 4969 7769 6448 6c77 5a53 4936 
00003c2: 4d58 3139 4c43 4a70 6331 4e30 636e 566a 
00003d2: 6443 4936 6448 4a31 5a53 7769 6257 5630 
00003e2: 6147 396b 6379 4936 6533 3073 496d 3568 
00003f2: 6257 567a 6347 466a 5a53 4936 496e 526c 
0000402: 6333 5245 6157 5a6d 5a58 4a6c 626d 4e6c 
0000412: 496e 303d 00                              ; data segment data
; move data: [163, 417) -> [164, 418)
0000162: b405                                      ; FIXUP section size
;; dump
0000000: 0061 736d 0100 0000 0108 0260 0000 6001 
0000010: 7f00 0213 0103 656e 760a 6279 7465 6368 
0000020: 756e 6b73 0200 0103 0504 0001 0000 0607 
0000030: 017f 0141 b005 0b07 2501 2143 6c61 7373 
0000040: 5374 7275 6374 7572 6544 6966 6665 7265 
0000050: 6e63 6554 6573 742e 4d61 696e 0000 0801 
0000060: 020a fd01 04de 0101 087f 2300 2100 2000 
0000070: 4110 6a41 e400 3602 0020 0041 006a 4101 
0000080: b739 0300 2000 4108 6a41 01b7 3903 0020 
0000090: 0041 146a 2400 2000 2101 2001 2102 2001 
00000a0: 4110 6a41 0041 9f8d 066b 3602 0023 0021 
00000b0: 0320 0341 086a 41e3 00b7 3903 0020 0341 
00000c0: 006a 2003 4108 6a2b 0300 3903 0020 0341 
00000d0: 106a 2003 4100 6a2b 0300 2003 4108 6a2b 
00000e0: 0300 a2aa 3602 0020 0341 146a 2400 2003 
00000f0: 2104 2300 2105 2005 4100 6a20 0441 006a 
0000100: 2b03 0039 0300 2005 4108 6a20 0441 086a 
0000110: 2b03 0039 0300 2005 4110 6a20 0441 106a 
0000120: 2802 0036 0200 2005 4114 6a24 0020 0521 
0000130: 0620 0441 106a 4100 41b8 b605 6b36 0200 
0000140: 2007 1001 0b11 0020 0041 006a 42ef 93d2 
0000150: a308 b939 0300 0b04 0010 030b 0400 1000 
0000160: 0b0b b405 0200 410a 0bd1 0265 794a 745a 
0000170: 5731 7663 6e6c 5164 4849 694f 6e73 6956 
0000180: 6d46 7364 5755 694f 6a45 7766 5377 6959 
0000190: 3278 6863 334d 694f 694a 6a61 584a 6a62 
00001a0: 4756 4462 4746 7a63 7949 7349 6d4e 7359 
00001b0: 584e 7a58 326c 6b49 6a6f 784d 4377 695a 
00001c0: 6d6c 6c62 4752 7a49 6a70 3749 6e67 694f 
00001d0: 6e73 695a 3256 755a 584a 7059 7949 3657 
00001e0: 3130 7349 6e4a 6864 7949 3649 6d59 324e 
00001f0: 4349 7349 6e52 3563 4755 694f 6a52 394c 
0000200: 434a 3549 6a70 3749 6d64 6c62 6d56 7961 
0000210: 574d 694f 6c74 644c 434a 7959 5863 694f 
0000220: 694a 6d4e 6a51 694c 434a 3065 5842 6c49 
0000230: 6a6f 3066 5377 6963 6949 3665 794a 6e5a 
0000240: 5735 6c63 6d6c 6a49 6a70 6258 5377 6963 
0000250: 6d46 3349 6a6f 6961 544d 7949 6977 6964 
0000260: 486c 775a 5349 364d 5831 394c 434a 7063 
0000270: 314e 3063 6e56 6a64 4349 365a 6d46 7363 
0000280: 3255 7349 6d31 6c64 4768 765a 484d 694f 
0000290: 6e74 394c 434a 7559 5731 6c63 3342 6859 
00002a0: 3255 694f 694a 305a 584e 3052 476c 6d5a 
00002b0: 6d56 795a 5735 6a5a 534a 3900 0041 db02 
00002c0: 0bd5 0265 794a 745a 5731 7663 6e6c 5164 
00002d0: 4849 694f 6e73 6956 6d46 7364 5755 694f 
00002e0: 6a4d 304e 3330 7349 6d4e 7359 584e 7a49 
00002f0: 6a6f 6959 326c 7959 3278 6c55 3352 7964 
0000300: 574e 3049 6977 6959 3278 6863 334e 6661 
0000310: 5751 694f 6a4d 304e 7977 695a 6d6c 6c62 
0000320: 4752 7a49 6a70 3749 6e67 694f 6e73 695a 
0000330: 3256 755a 584a 7059 7949 3657 3130 7349 
0000340: 6e4a 6864 7949 3649 6d59 324e 4349 7349 
0000350: 6e52 3563 4755 694f 6a52 394c 434a 3549 
0000360: 6a70 3749 6d64 6c62 6d56 7961 574d 694f 
0000370: 6c74 644c 434a 7959 5863 694f 694a 6d4e 
0000380: 6a51 694c 434a 3065 5842 6c49 6a6f 3066 
0000390: 5377 6963 6949 3665 794a 6e5a 5735 6c63 
00003a0: 6d6c 6a49 6a70 6258 5377 6963 6d46 3349 
00003b0: 6a6f 6961 544d 7949 6977 6964 486c 775a 
00003c0: 5349 364d 5831 394c 434a 7063 314e 3063 
00003d0: 6e56 6a64 4349 3664 484a 315a 5377 6962 
00003e0: 5756 3061 4739 6b63 7949 3665 3330 7349 
00003f0: 6d35 6862 5756 7a63 4746 6a5a 5349 3649 
0000400: 6e52 6c63 3352 4561 575a 6d5a 584a 6c62 
0000410: 6d4e 6c49 6e30 3d00                     
